// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Ambil Supabase URL dan anon key dari environment variables
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || "https://ovscsiulvdgwamhlkwkq.supabase.co";
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im92c2NzaXVsdmRnd2FtaGxrd2txIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI1NjY4MjEsImV4cCI6MjA1ODE0MjgyMX0.1BpvEPUYrDETlHFomNO8EsZBmoSypu5GEsJwlIfNCxc";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  }
});

// Fungsi untuk mengecek koneksi database
export const checkDatabaseConnection = async () => {
  try {
    // Coba melakukan query sederhana untuk mengecek koneksi
    const { data, error } = await supabase.from('connections').select('count').limit(1);
    
    if (error) {
      console.error('Database connection error:', error);
      return {
        connected: false,
        error: error.message
      };
    }
    
    return {
      connected: true
    };
  } catch (error) {
    console.error('Supabase client error:', error);
    return {
      connected: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
};

// Fungsi untuk menangani registrasi dengan penanganan error yang lebih baik
export const registerUser = async (email: string, password: string, userData = {}) => {
  try {
    // Cek koneksi database terlebih dahulu
    const connectionStatus = await checkDatabaseConnection();
    if (!connectionStatus.connected) {
      return {
        error: {
          message: `Tidak dapat terhubung ke database: ${connectionStatus.error}`
        }
      };
    }
    
    // Coba periksa apakah email sudah terdaftar
    try {
      const { data, error } = await supabase.auth.signInWithOtp({
        email,
        options: {
          shouldCreateUser: false
        }
      });
      
      // Jika tidak ada error, berarti email sudah terdaftar
      if (!error) {
        return {
          error: {
            message: 'Email sudah terdaftar. Silakan gunakan email lain atau login.'
          }
        };
      }
    } catch (e) {
      // Abaikan error ini, karena kita hanya ingin memeriksa
      console.log("Verifikasi email tidak terdaftar");
    }
    
    // Lakukan registrasi dengan opsi sederhana
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: window.location.origin + '/login',
        data: userData
      }
    });
    
    if (error) {
      // Log error untuk debugging
      console.error('Registration error:', error);
      
      // Tambahkan penanganan khusus untuk beberapa error umum
      if (error.message.includes('Email already registered')) {
        return {
          error: {
            message: 'Email sudah terdaftar. Silakan gunakan email lain atau login.'
          }
        };
      }
      
      if (error.message.includes('Database error')) {
        // Coba cara alternatif dengan signUp tanpa data
        try {
          const { data: simpleData, error: simpleError } = await supabase.auth.signUp({
            email,
            password
          });
          
          if (simpleError) {
            return {
              error: {
                message: 'Terjadi masalah saat registrasi. Detail: ' + simpleError.message
              }
            };
          }
          
          // Jika berhasil, coba perbarui metadata user
          if (simpleData?.user?.id) {
            await supabase.auth.updateUser({
              data: userData
            });
          }
          
          return { data: simpleData };
        } catch (alternativeError) {
          console.error('Alternative registration error:', alternativeError);
          return {
            error: {
              message: 'Terjadi masalah dengan registrasi. Silakan coba lagi atau hubungi administrator.'
            }
          };
        }
      }
      
      return { error };
    }
    
    return { data };
  } catch (error) {
    console.error('Unexpected error during registration:', error);
    return {
      error: {
        message: error instanceof Error ? error.message : 'Terjadi kesalahan tak terduga saat registrasi'
      }
    };
  }
};